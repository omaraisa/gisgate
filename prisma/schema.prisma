generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id              String         @id @default(uuid())
  title           String
  slug            String         @unique
  excerpt         String?
  content         String
  featuredImage   String?
  status          ArticleStatus  @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  metaTitle       String?
  metaDescription String?
  aiGenerated     Boolean        @default(false)
  aiPrompt        String?
  viewCount       Int            @default(0)
  category        String?
  tags            String?
  authorId        String?
  authorName      String?
  authorSlug      String?
  images          ArticleImage[]
  author          User?          @relation("UserArticles", fields: [authorId], references: [id])

  @@map("articles")
}

model Video {
  id              String         @id @default(uuid())
  title           String
  slug            String         @unique
  excerpt         String?
  content         String
  videoUrl        String?
  duration        String?
  thumbnail       String?
  featuredImage   String?
  status          ArticleStatus  @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  metaTitle       String?
  metaDescription String?
  aiGenerated     Boolean        @default(false)
  aiPrompt        String?
  viewCount       Int            @default(0)
  category        String?
  tags            String?
  authorId        String?
  authorName      String?
  authorSlug      String?
  images          VideoImage[]
  author          User?          @relation("UserVideos", fields: [authorId], references: [id])

  @@map("videos")
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String
  alt       String?
  caption   String?
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}

model VideoImage {
  id      String @id @default(uuid())
  url     String
  alt     String?
  caption String?
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_images")
}

model User {
  id                       String        @id @default(uuid())
  email                    String        @unique
  username                 String?       @unique
  password                 String
  firstName                String?
  lastName                 String?
  fullNameArabic           String?
  fullNameEnglish          String?
  avatar                   String?
  bio                      String?
  website                  String?
  emailVerified            Boolean       @default(false)
  emailVerificationToken   String?       @unique
  emailVerificationExpires DateTime?
  passwordResetToken       String?       @unique
  passwordResetExpires     DateTime?
  isActive                 Boolean       @default(true)
  lastLogin                DateTime?
  loginAttempts            Int           @default(0)
  lockUntil                DateTime?
  role                     UserRole      @default(USER)
  wordpressId              Int?          @unique
  wordpressMeta            String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  articles                 Article[]     @relation("UserArticles")
  videos                   Video[]       @relation("UserVideos")
  sessions                 UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  USER
}
