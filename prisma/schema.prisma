generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id              String         @id @default(uuid())
  title           String
  slug            String         @unique
  excerpt         String?
  content         String
  featuredImage   String?
  status          ArticleStatus  @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  metaTitle       String?
  metaDescription String?
  aiGenerated     Boolean        @default(false)
  aiPrompt        String?
  viewCount       Int            @default(0)
  category        String?
  tags            String?
  authorId        String?
  authorName      String?
  authorSlug      String?
  images          ArticleImage[]
  author          User?          @relation("UserArticles", fields: [authorId], references: [id])

  @@map("articles")
}

model Video {
  id              String         @id @default(uuid())
  title           String
  slug            String         @unique
  excerpt         String?
  content         String
  videoUrl        String?
  duration        String?
  thumbnail       String?
  featuredImage   String?
  status          ArticleStatus  @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  metaTitle       String?
  metaDescription String?
  aiGenerated     Boolean        @default(false)
  aiPrompt        String?
  viewCount       Int            @default(0)
  category        String?
  tags            String?
  authorId        String?
  authorName      String?
  authorSlug      String?
  images          VideoImage[]
  author          User?          @relation("UserVideos", fields: [authorId], references: [id])
  courseId        String?
  course          Course?        @relation("CourseLessons", fields: [courseId], references: [id])
  order           Int            @default(0)
  progress        LessonProgress[]

  @@map("videos")
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String
  alt       String?
  caption   String?
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}

model VideoImage {
  id      String @id @default(uuid())
  url     String
  alt     String?
  caption String?
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_images")
}

model User {
  id                       String        @id @default(uuid())
  email                    String        @unique
  username                 String?       @unique
  password                 String
  firstName                String?
  lastName                 String?
  fullNameArabic           String?
  fullNameEnglish          String?
  avatar                   String?
  bio                      String?
  website                  String?
  emailVerified            Boolean       @default(false)
  emailVerificationToken   String?       @unique
  emailVerificationExpires DateTime?
  passwordResetToken       String?       @unique
  passwordResetExpires     DateTime?
  isActive                 Boolean       @default(true)
  lastLogin                DateTime?
  loginAttempts            Int           @default(0)
  lockUntil                DateTime?
  role                     UserRole      @default(USER)
  wordpressId              Int?          @unique
  wordpressMeta            String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  articles                 Article[]     @relation("UserArticles")
  videos                   Video[]       @relation("UserVideos")
  courses                  Course[]      @relation("UserCourses")
  enrollments              CourseEnrollment[] @relation("UserEnrollments")
  progress                 LessonProgress[] @relation("UserProgress")
  sessions                 UserSession[]
  certificates             Certificate[] @relation("UserCertificates")

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Course {
  id              String           @id @default(uuid())
  title           String
  slug            String           @unique
  description     String?
  excerpt         String?
  featuredImage   String?
  category        String?
  tags            String?
  status          ArticleStatus    @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  price           Float?           @default(0)
  currency        String?          @default("USD")
  isFree          Boolean          @default(true)
  isPrivate       Boolean          @default(false)
  authorId        String?
  authorName      String?
  author          User?            @relation("UserCourses", fields: [authorId], references: [id])
  lessons         Video[]          @relation("CourseLessons")
  enrollments     CourseEnrollment[]
  totalLessons    Int              @default(0)
  duration        String?
  level           CourseLevel      @default(BEGINNER)
  language        String?          @default("ar")

  @@map("courses")
}

model CourseEnrollment {
  id            String            @id @default(uuid())
  userId        String
  courseId      String
  enrolledAt    DateTime          @default(now())
  completedAt   DateTime?
  progress      Float             @default(0)
  isCompleted   Boolean           @default(false)
  user          User              @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course        Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]
  certificates  Certificate[]

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id            String           @id @default(uuid())
  userId        String
  lessonId      String
  enrollmentId  String
  watchedTime   Int              @default(0) // in seconds
  isCompleted   Boolean          @default(false)
  completedAt   DateTime?
  lastWatchedAt DateTime         @default(now())
  user          User             @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  lesson        Video            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment    CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model CertificateTemplate {
  id              String        @id @default(uuid())
  name            String        // "Arabic Certificate", "English Certificate"
  language        String        // "ar", "en"
  backgroundImage String        // URL to uploaded background image
  fields          Json          // Array of field configurations
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  certificates    Certificate[]

  @@map("certificate_templates")
}

model Certificate {
  id           String              @id @default(uuid())
  templateId   String
  userId       String
  enrollmentId String
  certificateId String            @unique // Public certificate ID for verification
  data         Json               // Generated certificate data
  createdAt    DateTime           @default(now())
  template     CertificateTemplate @relation(fields: [templateId], references: [id])
  user         User               @relation("UserCertificates", fields: [userId], references: [id])
  enrollment   CourseEnrollment   @relation(fields: [enrollmentId], references: [id])

  @@unique([userId, enrollmentId])
  @@map("certificates")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  USER
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
