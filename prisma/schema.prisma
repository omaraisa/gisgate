generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id              String         @id @default(uuid())
  title           String
  slug            String         @unique
  excerpt         String?
  content         String
  featuredImage   String?
  status          ArticleStatus  @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  metaTitle       String?
  metaDescription String?
  aiGenerated     Boolean        @default(false)
  aiPrompt        String?
  viewCount       Int            @default(0)
  category        String?
  tags            String?
  authorSlug      String?
  authorId        String?
  authorName      String?
  images          ArticleImage[]
  author          User?          @relation("UserArticles", fields: [authorId], references: [id])

  @@map("articles")
}

model Video {
  id              String           @id @default(uuid())
  title           String
  slug            String           @unique
  excerpt         String?
  content         String
  videoUrl        String?
  duration        String?
  thumbnail       String?
  featuredImage   String?
  status          ArticleStatus    @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  metaTitle       String?
  metaDescription String?
  aiGenerated     Boolean          @default(false)
  aiPrompt        String?
  viewCount       Int              @default(0)
  category        String?
  tags            String?
  authorId        String?
  authorName      String?
  authorSlug      String?
  courseId        String?
  order           Int              @default(0)
  progress        LessonProgress[]
  images          VideoImage[]
  author          User?            @relation("UserVideos", fields: [authorId], references: [id])
  course          Course?          @relation("CourseLessons", fields: [courseId], references: [id])

  @@map("videos")
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String
  alt       String?
  caption   String?
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}

model VideoImage {
  id      String  @id @default(uuid())
  url     String
  alt     String?
  caption String?
  videoId String
  video   Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_images")
}

model User {
  id                       String             @id @default(uuid())
  email                    String             @unique
  username                 String?            @unique
  password                 String
  firstName                String?
  lastName                 String?
  avatar                   String?
  bio                      String?
  website                  String?
  emailVerified            Boolean            @default(false)
  emailVerificationToken   String?            @unique
  emailVerificationExpires DateTime?
  passwordResetToken       String?            @unique
  passwordResetExpires     DateTime?
  isActive                 Boolean            @default(true)
  lastLogin                DateTime?
  loginAttempts            Int                @default(0)
  lockUntil                DateTime?
  role                     UserRole           @default(USER)
  wordpressId              Int?               @unique
  wordpressMeta            String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  fullNameArabic           String?
  fullNameEnglish          String?
  articles                 Article[]          @relation("UserArticles")
  certificates             Certificate[]      @relation("UserCertificates")
  enrollments              CourseEnrollment[] @relation("UserEnrollments")
  courses                  Course[]           @relation("UserCourses")
  progress                 LessonProgress[]   @relation("UserProgress")
  payments                 PaymentOrder[]     @relation("UserPayments")
  sessions                 UserSession[]
  videos                   Video[]            @relation("UserVideos")

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Course {
  id                String             @id @default(uuid())
  title             String
  slug              String             @unique
  description       String?
  excerpt           String?
  featuredImage     String?
  category          String?
  tags              String?
  status            ArticleStatus      @default(DRAFT)
  publishedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  price             Float?             @default(0)
  currency          String?            @default("USD")
  isFree            Boolean            @default(true)
  isPrivate         Boolean            @default(false)
  authorId          String?
  authorName        String?
  totalLessons      Int                @default(0)
  durationValue     Int?
  durationUnit      String?
  level             CourseLevel        @default(BEGINNER)
  language          String?            @default("ar")
  titleEnglish      String?
  authorNameEnglish String?
  enrollments       CourseEnrollment[]
  author            User?              @relation("UserCourses", fields: [authorId], references: [id])
  paymentOrders     PaymentOrder[]
  lessons           Video[]            @relation("CourseLessons")

  @@map("courses")
}

model CourseEnrollment {
  id             String           @id @default(uuid())
  userId         String
  courseId       String
  enrolledAt     DateTime         @default(now())
  completedAt    DateTime?
  progress       Float            @default(0)
  isCompleted    Boolean          @default(false)
  certificates   Certificate[]
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User             @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id            String           @id @default(uuid())
  userId        String
  lessonId      String
  enrollmentId  String
  watchedTime   Int              @default(0)
  isCompleted   Boolean          @default(false)
  completedAt   DateTime?
  lastWatchedAt DateTime         @default(now())
  enrollment    CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson        Video            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user          User             @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model CertificateTemplate {
  id               String   @id @default(uuid())
  name             String
  language         String
  backgroundImage  String
  fields           Json
  isActive         Boolean  @default(true)
  isDefault        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  backgroundHeight Int      @default(3508)
  backgroundWidth  Int      @default(2480)

  @@map("certificate_templates")
}

model Certificate {
  id            String           @id @default(uuid())
  userId        String
  enrollmentId  String
  certificateId String           @unique
  data          Json
  createdAt     DateTime         @default(now())
  arTemplateId  String?
  enTemplateId  String?
  enrollment    CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user          User             @relation("UserCertificates", fields: [userId], references: [id])

  @@unique([userId, enrollmentId])
  @@map("certificates")
}

model PaymentOrder {
  id              String               @id @default(uuid())
  userId          String
  courseId        String
  amount          Float
  currency        String               @default("USD")
  status          PaymentStatus        @default(PENDING)
  paypalOrderId   String?
  paypalPaymentId String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  paidAt          DateTime?
  course          Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user            User                 @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  refunds         PaymentRefund[]
  transactions    PaymentTransaction[]

  @@map("payment_orders")
}

model PaymentTransaction {
  id                  String        @id @default(uuid())
  orderId             String
  paypalTransactionId String        @unique
  amount              Float
  currency            String        @default("USD")
  status              PaymentStatus @default(PENDING)
  paypalFee           Float?
  netAmount           Float?
  createdAt           DateTime      @default(now())
  order               PaymentOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

model PaymentRefund {
  id             String       @id @default(uuid())
  orderId        String
  paypalRefundId String       @unique
  amount         Float
  currency       String       @default("USD")
  reason         String?
  status         RefundStatus @default(PENDING)
  requestedAt    DateTime     @default(now())
  processedAt    DateTime?
  order          PaymentOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_refunds")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  USER
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
