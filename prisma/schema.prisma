// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String   // Rich HTML content
  featuredImage String?
  images      ArticleImage[]
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  
  // AI integration fields
  aiGenerated     Boolean @default(false)
  aiPrompt        String?
  
  // Analytics
  viewCount       Int @default(0)
  
  // Categories and tags
  category        String?
  tags            String? // JSON string for tags array
  
  @@map("articles")
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String
  alt       String?
  caption   String?
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@map("article_images")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  LEARNER
  EDITOR
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(LEARNER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
